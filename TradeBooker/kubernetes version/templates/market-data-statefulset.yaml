apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: market-data
  labels:
    app: market-data
spec:
  serviceName: market-data-headless
  replicas: {{ .Values.app.marketData.replicaCount }}
  selector:
    matchLabels:
      app: market-data
  template:
    metadata:
      labels:
        app: market-data
    spec:
      containers:
      - name: market-data
        image: {{ .Values.app.image }}
        imagePullPolicy: Always
        env:
        - name: SERVICE_TYPE
          value: "market-data"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: REDIS_HOST
          value: "redis-primary"
        - name: PYTHONPATH
          value: "/app"
        command: ["python"]
        args: ["main.py"]
        # Simple health checks that don't interfere with the continuous service
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import redis; redis.Redis(host='redis-primary', port=6379).ping()"
          initialDelaySeconds: 60  # Give plenty of startup time
          periodSeconds: 120       # Check every 2 minutes
          timeoutSeconds: 10       # Allow time for the check
          failureThreshold: 3      # Allow failures before restart
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "import redis; redis.Redis(host='redis-primary', port=6379).ping()"
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 2
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"

---
apiVersion: v1
kind: Service
metadata:
  name: market-data-headless
  labels:
    app: market-data
spec:
  ports:
  - protocol: TCP
    port: 8000
    targetPort: 8000
    name: http
  clusterIP: None
  selector:
    app: market-data